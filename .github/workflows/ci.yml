name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Lint Code
      run: npm run ng lint || echo "No lint script found, skipping..."
      continue-on-error: true

    - name: Build Application
      run: npm run build -- --configuration=production

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Start Mock API
      run: npm run start:api &
      env:
        CI: true

    - name: Wait for Mock API
      run: npx wait-on http://localhost:3000 --timeout 30000

    - name: Start Application
      run: npm start &
      env:
        CI: true

    - name: Wait for Application
      run: npx wait-on http://localhost:4200 --timeout 60000

    - name: Run E2E Tests
      run: npm run e2e -- --project=chromium

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 30

    - name: Upload Build Artifacts
      if: success() && matrix.node-version == '20.x'
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 7

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist/mini-fleet-manager/browser
        cname: # Optional: your custom domain
